{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","cityName","tempData","visibility","speed","weatherDetail","weatherImg","icon","list","days","dateToday","Date","toLocaleDateString","year","day","month","dayToday","now","getDay","data","city","name","main","wind","weather","i","length","dayName","dt_txt","newList","Map","map","values","slice","className","Math","round","temp","temp_max","temp_min","src","alt","index","feels_like","pressure","humidity","App","lon","useState","setData","lat","a","fetch","process","then","res","json","result","cod","catch","err","console","log","navigator","geolocation","getCurrentPosition","position","coords","longitude","fetchData","latitude","handleClick","query","document","getElementById","value","type","id","placeholder","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mRA+HeA,MA5Hf,SAAiBC,GAEb,IAAIC,EAAW,KACXC,EAAW,KACXC,EAAa,KACbC,EAAQ,KACRC,EAAgB,KAChBC,EAAaD,EAAcE,KAC3BC,EAAO,GACPC,EAAO,CAAC,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAGpDC,GAAW,IAAIC,MAAOC,mBAAmB,QAAS,CAACC,KAAK,UAAWC,IAAI,UAAWC,MAAM,SACxFC,EAHW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAG1D,IAAIL,KAAKA,KAAKM,OAAOC,UAE7C,GAAGlB,EAAMmB,KAAM,CACXlB,EAAWD,EAAMmB,KAAKC,KAAKC,KAC3BnB,EAAWF,EAAMmB,KAAKX,KAAK,GAAGc,KAC9BnB,EAAaH,EAAMmB,KAAKX,KAAK,GAAGL,WAChCC,EAAQJ,EAAMmB,KAAKX,KAAK,GAAGe,KAAKnB,MAEhCE,GADAD,EAAgBL,EAAMmB,KAAKX,KAAK,GAAGgB,QAAQ,IAChBjB,KAG3BC,EAAOR,EAAMmB,KAAKX,KAElB,IAAI,IAAIiB,EAAI,EAAGA,EAAIjB,EAAKkB,OAAQD,IAAK,CACjC,IACME,EAAUlB,EADH,IAAIE,KAAKH,EAAKiB,GAAGG,QACJV,UAG1BV,EAAKiB,GAAGE,QAAUA,EAEtB,IAAIE,EAAO,YAAO,IAAIC,IAAItB,EAAKuB,KAAI,SAAAjB,GAAG,MAAG,CAACA,EAAG,QAAaA,OAAOkB,UACjExB,EAAOqB,EAAQI,MAAM,GAGzB,OACI,qBAAKC,UAAU,UAAf,SACI,sBAAKA,UAAU,kBAAf,UAGI,0BAASA,UAAU,gBAAnB,UACI,sBAAKA,UAAU,wBAAf,UACI,qBAAKA,UAAU,YAAf,SAA2B,4BAAIjC,MAC/B,qBAAKiC,UAAU,iBAAf,SAAgC,8BAAIlB,EAAJ,IAAeN,OAC/C,qBAAKwB,UAAU,aAAf,SAA4B,8BAAIC,KAAKC,MAAMlC,EAASmC,MAAxB,IAA+B,sBAAMH,UAAU,YAAhB,wBAC3D,qBAAKA,UAAU,eAAf,SAA8B,8BAAG,uBAAMA,UAAU,WAAhB,oBAA8BC,KAAKC,MAAMlC,EAASoC,UAAlD,UAAH,IAAwE,uBAAMJ,UAAU,WAAhB,oBAA8BC,KAAKC,MAAMlC,EAASqC,UAAlD,kBAE1G,sBAAKL,UAAU,wBAAf,UACI,qBAAKM,IAAG,0CAAqClC,EAArC,QAAuDmC,IAAI,kBACnE,qBAAKP,UAAU,eAAf,SAA+B7B,EAAciB,aAKrD,yBAASY,UAAU,iBAAnB,SACK1B,EAAKuB,KAAI,SAACjB,EAAK4B,GAAN,OACV,sBAAKR,UAAU,cAAf,UACI,qBAAKA,UAAU,MAAf,SAAsBpB,EAAIa,UAC1B,qBAAKa,IAAG,0CAAqC1B,EAAIU,QAAQ,GAAGjB,KAApD,QAAgEkC,IAAI,GAAGP,UAAU,sBACzF,qBAAKA,UAAU,oBAAf,SACI,8BAAIC,KAAKC,MAAMtB,EAAIQ,KAAKe,MAAxB,IAA+B,sBAAMH,UAAU,gBAAhB,wBAEnC,qBAAKA,UAAU,cAAf,SAA6B,8BAAG,uBAAMA,UAAU,WAAhB,mBAA6BC,KAAKC,MAAMtB,EAAIQ,KAAKgB,UAAjD,UAAH,IAAuE,uBAAMJ,UAAU,WAAhB,mBAA6BC,KAAKC,MAAMtB,EAAIQ,KAAKiB,UAAjD,iBANtEG,QAatC,0BAASR,UAAU,qBAAnB,UAGI,qBAAKA,UAAU,sBAAf,SAAsCjC,IAGtC,sBAAKiC,UAAU,uBAAf,UACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,iBAAf,wBACA,qBAAKA,UAAU,kBAAf,SACI,8BAAIC,KAAKC,MAAMlC,EAASyC,YAAxB,IAAqC,sBAAMT,UAAU,iBAAhB,2BAG7C,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,iBAAf,wBACA,qBAAKA,UAAU,kBAAf,SACI,8BAAIC,KAAKC,MAAMjC,EAAa,KAA5B,IAAmC,sBAAM+B,UAAU,iBAAhB,wBAG3C,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,iBAAf,0BACA,qBAAKA,UAAU,kBAAf,SACI,8BAAIhC,EAAS0C,SAAb,IAAuB,sBAAMV,UAAU,iBAAhB,yBAG/B,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,iBAAf,kBACA,qBAAKA,UAAU,kBAAf,SACI,8BAAI9B,EAAJ,IAAW,sBAAM8B,UAAU,iBAAhB,0BASnB,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,iBAAf,sBACA,qBAAKA,UAAU,kBAAf,SACI,8BAAIhC,EAAS2C,SAAb,IAAuB,sBAAMX,UAAU,iBAAhB,mCC7CxCY,MAhEf,WAAe,IAmBPC,EAnBO,EAEWC,mBAAS,IAFpB,mBAEN7B,EAFM,KAEA8B,EAFA,iDAKb,WAAyBC,EAAKH,GAA9B,SAAAI,EAAA,yDACMhC,EAAKX,KADX,gCAEU4C,MAAM,wDAAD,OAAyDF,EAAzD,gBAAoEH,EAApE,+BAA8FM,qCACxGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACa,QAAfA,EAAOC,KACRT,EAAQQ,MAGXE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,UAAWF,MATzC,4CALa,sBAsBRG,UAAUC,aACXD,UAAUC,YAAYC,oBAAmB,SAAAC,GACrCnB,EAAMmB,EAASC,OAAOC,UAxBjB,sCA0BLC,CADMH,EAASC,OAAOG,SACPvB,MAMvB,IAAMwB,EAAW,uCAAG,4BAAApB,EAAA,sDACZqB,EAAQC,SAASC,eAAe,cAAcC,MAClDvB,MAAM,sDAAD,OAAuDoB,EAAvD,+BAAmFnB,qCACnFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACe,QAAfA,EAAOC,KACRT,EAAQQ,MAGbE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,aAAcF,MAT5B,2CAAH,qDAYjB,OACE,sBAAK1B,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACI,qBAAKA,UAAU,aAAf,SACI,iDAEJ,sBAAKA,UAAU,aAAf,UACI,uBAAO0C,KAAK,OAAOvD,KAAK,YAAYwD,GAAG,aAAaC,YAAY,mBAChE,wBAAQD,GAAG,SAASE,QAASR,EAA7B,SAA0C,mBAAGrC,UAAU,0BAG7C,IAAhBf,EAAKO,OACL,cAAC,EAAD,CAASP,KAAMA,IAEf,4BCnDO6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,SAM1BM,M","file":"static/js/main.4e6a7172.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Weather.css';\r\n\r\nfunction Weather(props) {\r\n\r\n    let cityName = \"--\";\r\n    let tempData = \"--\";\r\n    let visibility = \"--\";\r\n    let speed = \"--\";\r\n    let weatherDetail = \"--\";\r\n    let weatherImg = weatherDetail.icon;\r\n    let list = []\r\n    let days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat'];\r\n    let longDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    let dateToday =new Date().toLocaleDateString(\"en-GB\", {year:\"numeric\", day:\"2-digit\", month:\"long\"});\r\n    let dayToday = longDays[new Date(Date.now()).getDay()];\r\n\r\n    if(props.data) {\r\n        cityName = props.data.city.name;\r\n        tempData = props.data.list[0].main;\r\n        visibility = props.data.list[0].visibility;\r\n        speed = props.data.list[0].wind.speed;\r\n        weatherDetail = props.data.list[0].weather[0];\r\n        weatherImg = weatherDetail.icon;\r\n\r\n        //5 Day Forecast Data\r\n        list = props.data.list;\r\n\r\n        for(var i = 0; i < list.length; i++) {\r\n            const date = new Date(list[i].dt_txt);\r\n            const dayName = days[date.getDay()];\r\n\r\n            //Add a dayName property to each weather item\r\n            list[i].dayName = dayName;\r\n        }\r\n        let newList = [...new Map(list.map(day =>[day[\"dayName\"], day])).values()];\r\n        list = newList.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Weather\">\r\n            <div className=\"content-wrapper\">\r\n\r\n                {/*Today's Weather */}\r\n                <section className=\"weather-today\">\r\n                    <div className=\"city-weather-value-td\">\r\n                        <div className=\"city-name\"><p>{cityName}</p></div>\r\n                        <div className=\"temp-date-time\"><p>{dayToday} {dateToday}</p></div>\r\n                        <div className=\"temp-value\"><p>{Math.round(tempData.temp)} <span className=\"temp-unit\">°C</span></p></div>\r\n                        <div className=\"temp-max-min\"><p><span className=\"temp-max\">↑ {Math.round(tempData.temp_max)}°</span> <span className=\"temp-min\">↓ {Math.round(tempData.temp_min)}°</span></p></div>\r\n                    </div>\r\n                    <div className=\"city-weather-image-td\">\r\n                        <img src={`http://openweathermap.org/img/w/${weatherImg}.png`} alt=\"Partly Cloudy\" />\r\n                        <div className=\"weather-name\">{weatherDetail.main}</div>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*5 Day Weather Forecast*/}\r\n                <section className=\"weather-future\">\r\n                    {list.map((day, index) => (\r\n                    <div className=\"weather-day\" key={index}>\r\n                        <div className=\"day\">{day.dayName}</div>\r\n                        <img src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`} alt=\"\" className=\"day-weather-image\" />\r\n                        <div className=\"day-weather-value\">\r\n                            <p>{Math.round(day.main.temp)} <span className=\"day-temp-unit\">°C</span></p>\r\n                        </div>\r\n                        <div className=\"day-max-min\"><p><span className=\"temp-max\">↑{Math.round(day.main.temp_max)}°</span> <span className=\"temp-min\">↓{Math.round(day.main.temp_min)}°</span></p></div>\r\n                    </div>\r\n                    ))}\r\n\r\n                </section>\r\n\r\n                {/*More parameters on today's weather conditions */}\r\n                <section className=\"weather-parameters\">\r\n\r\n                    {/* City name displayed on top of parameter section */}\r\n                    <div className=\"parameter-city-name\">{cityName}</div>\r\n                \r\n                {/* Parameters */}\r\n                    <div className=\"parameters-container\">\r\n                        <div className=\"parameter\">\r\n                            <div className=\"parameter-name\">Feels like</div>\r\n                            <div className=\"parameter-value\">\r\n                                <p>{Math.round(tempData.feels_like)} <span className=\"parameter-unit\">°C</span></p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"parameter\">\r\n                            <div className=\"parameter-name\">Visibility</div>\r\n                            <div className=\"parameter-value\">\r\n                                <p>{Math.round(visibility / 1000)} <span className=\"parameter-unit\">km</span></p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"parameter\">\r\n                            <div className=\"parameter-name\">Air Pressure</div>\r\n                            <div className=\"parameter-value\">\r\n                                <p>{tempData.pressure} <span className=\"parameter-unit\">hpa</span></p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"parameter\">\r\n                            <div className=\"parameter-name\">Wind</div>\r\n                            <div className=\"parameter-value\">\r\n                                <p>{speed} <span className=\"parameter-unit\">km/h</span></p>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className=\"parameter\">\r\n                            <div className=\"parameter-name\">UV Index</div>\r\n                            <div className=\"parameter-value\">\r\n                                <p>Very Weak</p>\r\n                            </div>\r\n                        </div> */}\r\n                        <div className=\"parameter\">\r\n                            <div className=\"parameter-name\">Humidity</div>\r\n                            <div className=\"parameter-value\">\r\n                                <p>{tempData.humidity} <span className=\"parameter-unit\">%</span></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </section>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Weather;","import {useState} from 'react';\r\nimport './App.css';\r\nimport Weather from './components/Weather';\r\n\r\n\r\nfunction App() {\r\n  //State\r\n  const [data, setData] = useState([]);\r\n\r\n  //Fetch 5-day weather forecast\r\n  async function fetchData(lat, lon) {\r\n    if(!data.list) {\r\n      await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\r\n      .then(res => res.json())\r\n      .then((result) => {\r\n        if(result.cod === '200') {\r\n          setData(result);\r\n        }\r\n      })\r\n      .catch(err => console.log('Error: ', err));\r\n    }\r\n  }\r\n  \r\n  // useEffect(() => {\r\n    let lon, lat;\r\n\r\n    //Obtain User's Current Longitude and Latitude\r\n    if(navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n          lon = position.coords.longitude;\r\n          lat = position.coords.latitude;\r\n          fetchData(lat, lon);\r\n      });\r\n    }\r\n\r\n  // }, []);\r\n\r\n  const handleClick = async () => {\r\n      let query = document.getElementById('search-box').value;\r\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${query}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\r\n          .then(res => res.json())\r\n          .then((result) => {\r\n              if(result.cod === '200') {\r\n                setData(result);\r\n              }\r\n          })\r\n          .catch(err => console.log('ERROR is: ', err));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header\">\r\n          <div className=\"site-title\">\r\n              <p>Breeze Weather</p>\r\n          </div>\r\n          <div className=\"search-box\">\r\n              <input type=\"text\" name=\"city-name\" id=\"search-box\" placeholder=\"Search a place\"/>\r\n              <button id=\"search\" onClick={handleClick}><i className=\"fas fa-search\"></i></button>\r\n          </div>\r\n      </header>\r\n      {(data.length !== 0) ? (\r\n        <Weather data={data} />\r\n      ): (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}